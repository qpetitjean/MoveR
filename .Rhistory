max(dist2EdgeLFiltered, na.rm = T)),
ifelse(max(dist2EdgeLFiltered, na.rm = T) < 0,
0,
max(dist2EdgeLFiltered, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
# rename the cleaned dataset for further use
trackDat5 <- trackDat.borderfilt[[2]]
test <- MoveR::convert2List(trackDat4)
test <- MoveR::convert2List(trackDat4)
test <- MoveR::convert2List(trackDat4)
which(test[["dist2Edge"]] >= 0)
which(test[["dist2Edge"]] >= 0)
test[["trackletId"]][which(test[["dist2Edge"]] >= 0)]
trackDat4List <- MoveR::convert2List(trackDat4)
unique(trackDat4List[["trackletId"]][which(trackDat4List[["dist2Edge"]] >= 0)])
OutTracklets <- unique(trackDat4List[["trackletId"]][which(trackDat4List[["dist2Edge"]] >= 0)])
par(mfrow=c(1,2))
MoveR::drawTracklets(
trackDat4,
selTrack = OutTracklets,
main = "",
cex.main = 0.9,
add2It = list(
points(x = edge[, "x.pos"], y = edge[, "y.pos"], cex = 0.01)
)
)
OutTracklets
OutTracklets <- unique(trackDat4List[["identity"]][which(trackDat4List[["dist2Edge"]] >= 0)])
par(mfrow=c(1,2))
MoveR::drawTracklets(
trackDat4,
selTrack = OutTracklets,
main = "",
cex.main = 0.9,
add2It = list(
points(x = edge[, "x.pos"], y = edge[, "y.pos"], cex = 0.01)
)
)
OutTracklets
trackDat4List <- MoveR::convert2List(trackDat4)
OutTracklets <- unique(trackDat4List[["trackletId"]][which(trackDat4List[["dist2Edge"]] >= 0)])
OutTracklets
?drawTracklets
OutTracklets <- unique(trackDat4List[["identity"]][which(trackDat4List[["dist2Edge"]] >= 0)])
par(mfrow=c(1,2))
MoveR::drawTracklets(
trackDat4,
selTrack = OutTracklets,
colId = "identity",
main = "",
cex.main = 0.9,
add2It = list(
points(x = edge[, "x.pos"], y = edge[, "y.pos"], cex = 0.01)
)
)
OutTracklets
OutTracklets <- unique(trackDat4List[["trackletId"]][which(trackDat4List[["dist2Edge"]] >= 0)])
par(mfrow=c(1,2))
MoveR::drawTracklets(
trackDat4,
selTrack = OutTracklets,
main = ,
cex.main = 0.9,
add2It = list(
points(x = edge[, "x.pos"], y = edge[, "y.pos"], cex = 0.01)
)
)
MoveR::drawTracklets(
trackDat4,
selTrack = OutTracklets,
main = ,
cex.main = 0.9,
cex.start = 1,
add2It = list(
points(x = edge[, "x.pos"], y = edge[, "y.pos"], cex = 0.01)
)
)
MoveR::drawTracklets(
trackDat4,
selTrack = OutTracklets,
main = ,
cex.main = 0.9,
lwd = 2,
#cex.start = 1, # increase the start of the tracklet (help to locate it)
add2It = list(
points(x = edge[, "x.pos"], y = edge[, "y.pos"], cex = 0.01)
)
)
OutTracklets
trackDat4bis <- MoveR::analyseTracklets(trackDat.speedfilt[[2]],
customFunc = list(
dist2Edge = function(x) {
MoveR::locaPos(arenaGrad, df = x)
},
# extract the distance from the edge from the distance matrix and attribute it to each position from each trajectory.
InOut =  function(x) {
border <- border # specify the value of the border from the distance matrix
sapply(seq(nrow(x)), function(y)
if (x$dist2Edge[y] > 0) {
# if the particle is located at a distance above the border value, the particle is considered "In" the arena.
"In"
} else if (x$dist2Edge[y] <= 0) {
# if the particle is located at a value of 0 or below, the particle is considered "Out" of the arena.
"Out"
})
}
))
trackDat4bis <- MoveR::analyseTracklets(trackDat.speedfilt[[2]],
customFunc = list(
dist2Edge = function(x) {
MoveR::locaPos(arenaDist, df = x)
},
# extract the distance from the edge from the distance matrix and attribute it to each position from each trajectory.
InOut =  function(x) {
border <- border # specify the value of the border from the distance matrix
sapply(seq(nrow(x)), function(y)
if (x$dist2Edge[y] > 0) {
# if the particle is located at a distance above the border value, the particle is considered "In" the arena.
"In"
} else if (x$dist2Edge[y] <= 0) {
# if the particle is located at a value of 0 or below, the particle is considered "Out" of the arena.
"Out"
})
}
))
dist2EdgeL <- MoveR::convert2List(trackDat4)[["dist2Edge"]]
## plot particles' distance from the edge distribution before the filtering, add the edge (vertical line) and color the inner and outer part of the arena in green and red respectively
par(mfrow=c(1,2))
H <- hist(dist2EdgeL,
breaks = 100,
main = "Distance of the particles from the edge of \nthe arena before filtering",
xlab = "Particles' distance from the edge",
cex.main=0.9)
abline(v = 0, col = "#660000")
mtext(substitute(paste(bold("A"))), side = 3, line = 0, adj = 0, padj = -0.5)
polygon(c(min(dist2EdgeL, na.rm = T),
0,
0,
min(dist2EdgeL, na.rm = T)),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#336600", alpha.f = 0.25))
polygon(c(0,
ifelse(max(dist2EdgeL, na.rm = T) < 0,
0,
max(dist2EdgeL, na.rm = T)),
ifelse(max(dist2EdgeL, na.rm = T) < 0,
0,
max(dist2EdgeL, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
dist2EdgeL <- MoveR::convert2List(trackDat4bis)[["dist2Edge"]]
## plot particles' distance from the edge distribution before the filtering, add the edge (vertical line) and color the inner and outer part of the arena in green and red respectively
par(mfrow=c(1,2))
H <- hist(dist2EdgeL,
breaks = 100,
main = "Distance of the particles from the edge of \nthe arena before filtering",
xlab = "Particles' distance from the edge",
cex.main=0.9)
abline(v = 0, col = "#660000")
mtext(substitute(paste(bold("A"))), side = 3, line = 0, adj = 0, padj = -0.5)
polygon(c(min(dist2EdgeL, na.rm = T),
0,
0,
min(dist2EdgeL, na.rm = T)),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#336600", alpha.f = 0.25))
polygon(c(0,
ifelse(max(dist2EdgeL, na.rm = T) < 0,
0,
max(dist2EdgeL, na.rm = T)),
ifelse(max(dist2EdgeL, na.rm = T) < 0,
0,
max(dist2EdgeL, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
par(mfrow=c(1,2))
H <- hist(dist2EdgeL,
breaks = 100,
main = "Distance of the particles from the edge of \nthe arena before filtering",
xlab = "Particles' distance from the edge",
cex.main=0.9)
abline(v = 0, col = "#660000")
mtext(substitute(paste(bold("A"))), side = 3, line = 0, adj = 0, padj = -0.5)
polygon(c(min(dist2EdgeL, na.rm = T),
0,
0,
min(dist2EdgeL, na.rm = T)),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#336600", alpha.f = 0.25))
polygon(c(0,
ifelse(max(dist2EdgeL, na.rm = T) > 0,
0,
max(dist2EdgeL, na.rm = T)),
ifelse(max(dist2EdgeL, na.rm = T) > 0,
0,
max(dist2EdgeL, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
H <- hist(dist2EdgeL,
breaks = 100,
main = "Distance of the particles from the edge of \nthe arena before filtering",
xlab = "Particles' distance from the edge",
cex.main=0.9)
abline(v = 0, col = "#660000")
mtext(substitute(paste(bold("A"))), side = 3, line = 0, adj = 0, padj = -0.5)
polygon(c(max(dist2EdgeL, na.rm = T),
0,
0,
max(dist2EdgeL, na.rm = T)),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#336600", alpha.f = 0.25))
polygon(c(0,
ifelse(min(dist2EdgeL, na.rm = T) > 0,
0,
min(dist2EdgeL, na.rm = T)),
ifelse(min(dist2EdgeL, na.rm = T) > 0,
0,
min(dist2EdgeL, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
dist2EdgeLFiltered <- MoveR::convert2List(trackDat.borderfilt[[2]])[["dist2Edge"]]
hist(dist2EdgeLFiltered,
breaks = 100,
main = "Distance of the particles from the edge of \nthe arena after filtering",
xlab = "Particles' distance from the edge",
cex.main=0.9)
abline(v = 0, col = "#660000")
mtext(substitute(paste(bold("A"))), side = 3, line = 0, adj = 0, padj = -0.5)
polygon(c(max(dist2EdgeLFiltered, na.rm = T),
0,
0,
max(dist2EdgeLFiltered, na.rm = T)),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#336600", alpha.f = 0.25))
polygon(c(0,
ifelse(min(dist2EdgeLFiltered, na.rm = T) > 0,
0,
min(dist2EdgeLFiltered, na.rm = T)),
ifelse(min(dist2EdgeLFiltered, na.rm = T) > 0,
0,
min(dist2EdgeLFiltered, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
dist2EdgeLFiltered <- MoveR::convert2List(trackDat.borderfiltbis[[2]])[["dist2Edge"]]
hist(dist2EdgeLFiltered,
breaks = 100,
main = "Distance of the particles from the edge of \nthe arena after filtering",
xlab = "Particles' distance from the edge",
cex.main=0.9)
abline(v = 0, col = "#660000")
mtext(substitute(paste(bold("A"))), side = 3, line = 0, adj = 0, padj = -0.5)
polygon(c(max(dist2EdgeLFiltered, na.rm = T),
0,
0,
max(dist2EdgeLFiltered, na.rm = T)),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#336600", alpha.f = 0.25))
polygon(c(0,
ifelse(min(dist2EdgeLFiltered, na.rm = T) > 0,
0,
min(dist2EdgeLFiltered, na.rm = T)),
ifelse(min(dist2EdgeLFiltered, na.rm = T) > 0,
0,
min(dist2EdgeLFiltered, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
str(trackDat.borderfiltbis[[1]])
dist2EdgeL <- MoveR::convert2List(trackDat4bis)[["dist2Edge"]]
# plot particles' distance from the edge distribution before the filtering, add the edge (vertical line) and color the inner and outer part of the arena in green and red respectively
par(mfrow=c(1,2))
H <- hist(dist2EdgeL,
breaks = 100,
main = "Distance of the particles from the edge of \nthe arena before filtering",
xlab = "Particles' distance from the edge",
cex.main=0.9)
abline(v = 0, col = "#660000")
mtext(substitute(paste(bold("A"))), side = 3, line = 0, adj = 0, padj = -0.5)
polygon(c(max(dist2EdgeL, na.rm = T),
0,
0,
max(dist2EdgeL, na.rm = T)),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#336600", alpha.f = 0.25))
polygon(c(0,
ifelse(min(dist2EdgeL, na.rm = T) > 0,
0,
min(dist2EdgeL, na.rm = T)),
ifelse(min(dist2EdgeL, na.rm = T) > 0,
0,
min(dist2EdgeL, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
# create the filter
filter.outbis <-
MoveR::filterFunc(
trackDat4bis,
toFilter = "InOut",
customFunc = function(x)
x == "Out"
)
# apply the filter on the data using the frame rate as minimum duration of the tracklets
trackDat.borderfiltbis <-
MoveR::filterTracklets(trackDat4bis,
filter.outbis,
splitCond = TRUE,
minDur = frameRate)
str(trackDat.borderfiltbis[[1]])
## plot particles' distance from the edge distribution after the filtering, add the edge (vertical line) and color the inner and outer part of the arena in green and red respectively (here, the red part should not exist because we have removed the particles detected outside the arena)
dist2EdgeLFiltered <- MoveR::convert2List(trackDat.borderfiltbis[[2]])[["dist2Edge"]]
hist(dist2EdgeLFiltered,
breaks = 100,
main = "Distance of the particles from the edge of \nthe arena after filtering",
xlab = "Particles' distance from the edge",
cex.main=0.9)
abline(v = 0, col = "#660000")
mtext(substitute(paste(bold("A"))), side = 3, line = 0, adj = 0, padj = -0.5)
polygon(c(max(dist2EdgeLFiltered, na.rm = T),
0,
0,
max(dist2EdgeLFiltered, na.rm = T)),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#336600", alpha.f = 0.25))
polygon(c(0,
ifelse(min(dist2EdgeLFiltered, na.rm = T) > 0,
0,
min(dist2EdgeLFiltered, na.rm = T)),
ifelse(min(dist2EdgeLFiltered, na.rm = T) > 0,
0,
min(dist2EdgeLFiltered, na.rm = T)),
0),
c(0,
0,
max(H[["counts"]]),
max(H[["counts"]])),
col = grDevices::adjustcolor("#660000", alpha.f = 0.25))
trackDat4Listbis <- MoveR::convert2List(trackDat4bis)
OutTracklets
str(trackDat4Listbis)
OutTracklets <- unique(trackDat4Listbis[["trackletId"]][which(trackDat4Listbis[["dist2Edge"]] > 0)])
OutTracklets
OutTracklets <- unique(trackDat4Listbis[["trackletId"]][which(trackDat4Listbis[["dist2Edge"]] == 0)])
OutTracklets
# plot them
MoveR::drawTracklets(
trackDat4bis,
selTrack = OutTracklets,
main = ,
cex.main = 0.9,
cex.start = 1, # increase the size of the start points of the tracklet (help to locate it, particularly if the particle is still)
add2It = list(
points(x = edge[, "x.pos"], y = edge[, "y.pos"], cex = 0.01)
)
)
str(trackDat.borderfiltbis[[1]])
str(trackDat.borderfilt[[1]])
diameter
2.5 / 2 / scaling
FilterSummary <- do.call("cbind",
list(
data.frame(Infilt = unlist(trackDat.Infilt[[1]])),
data.frame(lenfilt = unlist(trackDat.lenfilt[[1]])),
data.frame(speedfilt = unlist(trackDat.speedfilt[[1]])),
data.frame(outfilt = unlist(trackDat.borderfilt[[1]]))
))
str(FilterSummary)
str9trackDat.Infilt[[1]]
str(trackDat.Infilt[[1]])
FilterSummary
FilterSummary
rownames(FilterSummary)
c(rownames(FilterSummary), "cumulative_%Data_kept_after_filter", "cumulative_%Data_kept_after_minDur")
# add cumulative_%Data_kept_after_filter and after_minDur
FilterSummary <- setnames(rbind(FilterSummary,
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[5])/FilterSummary[4,1]*100),
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[6])/FilterSummary[4,1]*100)),
c(rownames(FilterSummary), "cumulative_%Data_kept_after_filter", "cumulative_%Data_kept_after_minDur"))
FilterSummary <- stats::setnames(rbind(FilterSummary,
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[5])/FilterSummary[4,1]*100),
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[6])/FilterSummary[4,1]*100)),
c(rownames(FilterSummary), "cumulative_%Data_kept_after_filter", "cumulative_%Data_kept_after_minDur"))
FilterSummary <- stats::setNames(rbind(FilterSummary,
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[5])/FilterSummary[4,1]*100),
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[6])/FilterSummary[4,1]*100)),
c(rownames(FilterSummary), "cumulative_%Data_kept_after_filter", "cumulative_%Data_kept_after_minDur"))
rbind(FilterSummary,
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[5])/FilterSummary[4,1]*100),
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[6])/FilterSummary[4,1]*100))
rownames(FilterSummary), "cumulative_%Data_kept_after_filter", "cumulative_%Data_kept_after_minDur")
c(rownames(FilterSummary), "cumulative_%Data_kept_after_filter", "cumulative_%Data_kept_after_minDur")
str(stats::setNames(rbind(FilterSummary,
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[5])/FilterSummary[4,1]*100),
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[6])/FilterSummary[4,1]*100)),
c(rownames(FilterSummary), "cumulative_%Data_kept_after_filter", "cumulative_%Data_kept_after_minDur")))
rownames(FilterSummary)[c(9,10)] <- c("cumulative_%Data_kept_after_filter",
"cumulative_%Data_kept_after_minDur")
FilterSummary <- rbind(FilterSummary,
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[5])/FilterSummary[4,1]*100),
apply(FilterSummary, 2, FUN = function(x) as.numeric(x[6])/FilterSummary[4,1]*100))
rownames(FilterSummary)[c(9,10)] <- c("cumulative_%Data_kept_after_filter",
"cumulative_%Data_kept_after_minDur")
FilterSummary
Data_Trex_stats_before_filter <-
trackStats(trackDat,
frameR = frameRate,
scale = scaling,
unit = "cm")
Data_Trex_stats_after_filter <-
trackStats(trackDat4,
frameR = frameRate,
scale = scaling,
unit = "cm")
# compute and display a detailed summary of the tracking information before and after cleaning (see ??trackStats())
Data_Trex_stats_before_filter <-
MoveR::trackStats(trackDat,
frameR = frameRate,
scale = scaling,
unit = "cm")
Data_Trex_stats_after_filter <-
MoveR::trackStats(trackDat4,
frameR = frameRate,
scale = scaling,
unit = "cm")
str(Data_Trex_stats_before_filter)
str(Data_Trex_stats_after_filter)
Path2Data
basename(Path2Data)
dirname(Path2Data)
paste(paste(dirname(Path2Data, "cleanedData", sep = "_")
), "csv", "gz", sep = ".")
paste(paste(dirname(Path2Data), "cleanedData", sep = "_"
), "csv", "gz", sep = ".")
paste(paste(dirname(Path2Data[1]), "cleanedData", sep = "_"
), "csv", "gz", sep = ".")
paste(paste(dirname(Path2Data[1]), "/cleanedData", sep = "_"
), "csv", "gz", sep = ".")
paste(paste(dirname(Path2Data[1]), "cleanedData", sep = "/"
), "csv", "gz", sep = ".")
# save the cleaned dataset as .csv compressed as .gz
data.table::fwrite(
MoveR::convert2List(trackDat5),
paste(paste(dirname(Path2Data[1]), "cleanedData", sep = "/"
), "csv", "gz", sep = "."),
sep = ";",
dec = ".",
na = "NA",
)
# save the cleaned dataset as .csv compressed as .gz
data.table::fwrite(
MoveR::convert2List(trackDat5),
paste(paste(dirname(Path2Data[1]), "cleanedData", sep = "/"
), "csv", sep = "."),
sep = ";",
dec = ".",
na = "NA",
)

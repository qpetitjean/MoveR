######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################
#
# This script aims to reduce a dataset containing raw video tracking output and is specifically 
# adapted for Michela Ion Scotta dataset (thermal biology BIDIME). 
# Briefly, the script:
# - import raw data analysed using TRex tracking software 
# - append temperature data to the timeline of the video
# - reduce the video by removing data outside a given temperature range
# - and save back the dataset as .npz, the same formatting than raw TRex output
#
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################
# set parameters
######################################################################################################################
frameRate = 25 # Frame rate of the video

# path of the directory containing the spartacus files (already processed to include video number over the timeline)
SpartacusDir <- "D:/Postdoc_INRAE_SAM/Data_Bidime/Spartacus_out/"

# path of the npz files (TRex tracking raw output)
videoPath = "E:/Videos_comportement/Bidime_Trex_npzfiles/2021-03-01-ISA17150-chaud"

######################################################################################################################
# Run the script
######################################################################################################################

# Retrieve strain name from the video path
assay <- basename(videoPath)
strainName <-
  gsub("[[:digit:]]{1,4}-[[:digit:]]{1,4}-[[:digit:]]{1,4}",
       "",
       assay)
strainName <- gsub("^-", "", strainName)
strainName <- gsub("[^-]*$", "", strainName)
strainName <- gsub("-$", "", strainName)
if (length(grep("-", strainName)) > 0) {
  strainName <- gsub("-.*$", "", strainName)
}
# import spartacus file containing the evolution of the temperature over time 
## retrieve the path of the spartacus file corresponding to the strain name
SpartFileTemp <-
  list.files(SpartacusDir,
             pattern = strainName,
             full.names = TRUE)
## since we performed 2 assay (1 cold and 1 warm ramp) we need to select the spartacus file that correspond to
## the assay
if (length(grep("^.*c$|^.*C$", assay)) > 0 |
    length(grep("^.*chaud$|^.*Chaud$", assay)) > 0) {
  SpartFile <- SpartFileTemp[[which(grepl("c$|C$", SpartFileTemp))]]
} else{
  SpartFile <- SpartFileTemp[[which(grepl("f$|F$", SpartFileTemp))]]
}
SpartacusFile = list.files(SpartFile, pattern = "*Video_Time.csv", full.names = TRUE)

## import spartacus file
Spart <-
  as.data.frame(data.table::fread(
    SpartacusFile, sep = ";", dec = "."
  ))

# import npz files 
trackDatLTemp <-
  MoveR::readTrex(videoPath,
            imgHeight = 1080,
            mirrorY = FALSE, 
            rawDat = T)

# keep all the rawdat
trackDatL <- c(trackDatLTemp[[1]][1:7], trackDatLTemp[[2]][-c(13:14)])

# switch the formating of the spartacus' time column to hms
Spart$RtimeRound <- lubridate::hms(Spart$Time)

# retrieve starting time of the videos
Vstart <- Spart[!duplicated(Spart[, c("Video_Numb")]), ]
if (length(Vstart[Vstart$Video_Numb == 0]) > 0) {
  Vstart <- Vstart[-which(Vstart$Video_Numb == 0), ]
}

# retrieve the total duration and temperature of the Run in time
runDurs <-
  lubridate::period_to_seconds(tail(Spart$RtimeRound, 1) - Spart$RtimeRound[1]) + 1
runDurf <- runDurs * frameRate
runTimelinef <- seq(runDurf)
runTimelineS <- runTimelinef / frameRate
Timeline <-
  lubridate::seconds_to_period(lubridate::period_to_seconds(Vstart$RtimeRound[1] + runTimelineS))
Timeline <- as.data.frame(as.character(round(Timeline, 4)))
runTimeline <- cbind(runTimelinef, runTimelineS, Timeline)
names(runTimeline)[3] <- "Timeline"
runTimeline$RtimeS <-
  lubridate::period_to_seconds(lubridate::hms(runTimeline$Timeline))
runTimeline$RtimeSRound <-
  round(lubridate::period_to_seconds(lubridate::seconds_to_period(runTimeline$RtimeS)))
Spart$RtimeSRound <-
  lubridate::period_to_seconds(Spart$RtimeRound)
runTimeline <-
  base::merge(runTimeline, Spart[, c("Measured_Temp_Deg_C", "Video_Numb", "RtimeSRound")], by = "RtimeSRound", all = TRUE)

# sometimes spartacus forget 1 second
# replace NA by averaging the last temperature measured before the "Jump"
# and the first after the "jump" for each missing sequences
if (NA %in% runTimeline$Measured_Temp_Deg_C) {
  MissingVal <-
    base::split(which(is.na(
      runTimeline$Measured_Temp_Deg_C
    )), base::cumsum(c(1, base::diff(
      which(is.na(
        runTimeline$Measured_Temp_Deg_C
      ))
    ) != 1)))
  
  for (i in seq(length(MissingVal))) {
    # replace NA in temperature column
    runTimeline$Measured_Temp_Deg_C[min(MissingVal[[i]]):max(MissingVal[[i]])] <-
      mean(as.numeric(
        c(
          runTimeline$Measured_Temp_Deg_C[min(MissingVal[[i]]) - 1],
          runTimeline$Measured_Temp_Deg_C[max(MissingVal[[i]]) + 1]
        )
      ), na.rm = TRUE)
    # replace NA in video number column
    runTimeline$Video_Numb[min(MissingVal[[i]]):max(MissingVal[[i]])] <-
      mean(as.numeric(
        c(
          runTimeline$Video_Numb[min(MissingVal[[i]]) - 1],
          runTimeline$Video_Numb[max(MissingVal[[i]]) + 1]
        )
      ), na.rm = TRUE)
  }
}

# plot Temperature ramp according to Real time
plot(
  runTimeline$Measured_Temp_Deg_C ~ lubridate::as_date(
    lubridate::hms(lubridate::seconds_to_period(runTimeline$RtimeS)),
    origin = lubridate::today()
  ),
  type = "l",
  ylab = "Measured Temperature (C)",
  xlab = "Timeline (hh:mm)",
  main = paste("Temperature measured within the arena for", assay, sep =" ")
)

# append time and temperature to tracking data
# create the timeline of the video according to frame rate
timeline <-
  stats::setNames(data.frame(matrix(
    ncol = 3, nrow = length(unique(trackDatL$frame))
  )), c("frame", "videotime", "Rtime"))
timeline$frame <- sort(unique(trackDatL$frame))
timeline$videotime <-
  lubridate::seconds_to_period(timeline$frame / frameRate)

# retrieve the real timeline from starting time of the video
timeline$Rtime <-
  round(lubridate::seconds_to_period(
    lubridate::period_to_seconds(Vstart$RtimeRound[1] + timeline$videotime)
  ),
  2)
timeline$RtimeRound <- trunc(timeline$Rtime)

# concatenate tracking data and the timeline df
trackDatLfinal <-
  base::merge(trackDatL, timeline, by = "frame", all = TRUE)
trackDatLfinal$RtimeS <-
  lubridate::period_to_seconds(lubridate::hms(trackDatLfinal$Rtime))

# append the tracking data to the time line of the run
finalDat <-
  base::merge(runTimeline,
              trackDatLfinal,
              by = "RtimeS",
              all = TRUE)
# add an indication of the particle identity within each video
finalDat$IdVidId <-
  paste(finalDat$identity, finalDat$Video_Numb, sep = "_")
finalDat <- finalDat[order(finalDat$runTimelinef),]

# remove rows corresponding to movement before and after the starting of the experiment
finalDat <- finalDat[-c(which(is.na(finalDat$runTimelinef))), ]
finalDat <-
  finalDat[-c(which(
    finalDat$RtimeS < min(Spart$RtimeSRound, na.rm = T) |
      finalDat$RtimeS > max(Spart$RtimeSRound, na.rm = T)
  )),]

finalDatFrags <- MoveR::convert2frags(finalDat, by = "identity")

# reduce the dataset 
# here we will cut the dataset according to 35 degrees C
thirtyFive <- finalDat[which(finalDat$Measured_Temp_Deg_C == 35),]
plot(
  runTimeline$Measured_Temp_Deg_C ~ runTimeline$runTimelinef,
  type = "l",
  ylab = "Measured Temperature (C)",
  xlab = "Timeline (frame)",
  main = paste("Temperature measured within the arena for", assay, sep =
                 " ")
)
abline(h = 35, v = min(thirtyFive[["runTimelinef"]]))
abline(v = thirtyFive[["runTimelinef"]][which(diff(which(finalDat$Measured_Temp_Deg_C == 35)) > 1)+1])

# free some RAM
rm(trackDatLTemp, trackDatL, trackDatLfinal, runTimeline, Spart, timeline, Timeline, Vstart, runTimeline, runTimelinef, runTimelineS)
gc()

## create the filter
filter.time <-
  MoveR::filterFunc(
    finalDatFrags,
    toFilter = "runTimelinef",
    customFunc = function(x)
      x < min(thirtyFive[["runTimelinef"]]) |
      x > thirtyFive[["runTimelinef"]][which(diff(which(finalDat$Measured_Temp_Deg_C == 35)) > 1)+1]
  )

## filter individual length
finalDatFrags.time <-
  MoveR::filterFrags(finalDatFrags,
              filter.time,
              splitCond = TRUE,
              minDur = 10)
str(finalDatFrags.time[[1]])

## rename the filtered fragment according to identity
finalDatFragsfilteredL <- MoveR::convert2list(finalDatFrags.time[[2]])
finalDatFragsfiltered <- MoveR::convert2frags(finalDatFragsfilteredL, by = "identity")


## save the files on hardrive (one npz file per identity)
np <- reticulate::import("numpy")
for (x in seq(length(finalDatFragsfiltered))) {
  # build the path to save .npz files
  fileName <-
    paste0(
      "D:/Postdoc_INRAE_SAM/MoveR/inst/sampleData/sample_2/TREXOutput/",
      assay,
      "_fish",
      as.numeric(gsub("\\D", "", names(finalDatFragsfiltered)[x])),
      ".npz"
    )
  
  # remove the variable that are built with MovR::readTrex
  Temp <-
    finalDatFragsfiltered[[x]][-c(
      which(names(finalDatFragsfiltered[[x]]) == "frame.1"),
      which(names(finalDatFragsfiltered[[x]]) == "maj.ax"),
      which(names(finalDatFragsfiltered[[x]]) == "angle"),
      which(names(finalDatFragsfiltered[[x]]) == "min.ax"),
      which(names(finalDatFragsfiltered[[x]]) == "x.pos"),
      which(names(finalDatFragsfiltered[[x]]) == "y.pos"),
      which(names(finalDatFragsfiltered[[x]]) == "identity"),
      which(names(finalDatFragsfiltered[[x]]) == "fragsId")
    )]
 
  # replace some . introduced by MoveR::readTrex to replace # in variable names
   toreplace <- c("\\.head", "\\.pcentroid", "\\.wcentroid", "\\.centroid")
   towrite <- c("#head", "#pcentroid", "#wcentroid", "#centroid")
   for (j in 1:4) {
     index <- which(grepl(toreplace[[j]], names(Temp), fixed = FALSE))
     if (length(index) > 0) {
       for (k in index){
         names(Temp)[[k]] <-
           gsub(toreplace[[j]], towrite[[j]], names(Temp)[[k]], fixed = FALSE)
       }
     }
   }
   
  # create a string containing the argument to pass to savez function to save .npz file
  npzList <- paste(unlist(lapply(names(Temp), function(y)
    paste0("'", y, "'", "=Temp[[","'", y, "'", "]]"))), collapse = ", ")
  
  # save data as .npz in the hardrive
  do.call(
    what = np$savez_compressed,
    args = append(list(fileName), eval(parse(text=paste0("list(", npzList, ")")))) 
  )
}
beepr::beep()
 grghhn
###########################
# load the data

Data_Trex <- MoveR::readTrex(trexPath = "D:/Postdoc_INRAE_SAM/MoveR/inst/sampleData/sample_2/TREXOutput",
                             imgHeight = 1080,
                             mirrorY = TRUE, 
                             rawDat = T)

Data_TrexF <-  MoveR::convert2frags(Data_Trex[[1]][c(1,3,6)], by = "identity")


names(Data_TrexF)

str(Data_Trex)
str(finalDatFragsfilteredL)

table(Data_Trex$Data_Trex$identity)
table(Data_Trex$Data_Trex_Raw$IdVidId)


rm(list = ls.str(mode = 'numeric'))

trexPath = "D:/Postdoc_INRAE_SAM/MoveR/inst/sampleData/sample_2/TREXOutput"
imgHeight = 1080
mirrorY = TRUE
rawDat = T

# the problem come from the identification of missing indiv and ntarget or metric list

metricList <- list()
for (i in seq(length(VarN))) {
  metricList[[VarN[i]]] <-
    as.data.frame(do.call("rbind", mget(
      ls(pattern = VarN[i], envir = as.environment(Variable_list)),
      envir = as.environment(Variable_list)
    )))
  ### suppress the appended variable from variable_list to avoid error during merging
  Variable_list <-
    Variable_list[-c(which(
      names(Variable_list) %in% ls(pattern = VarN[i], envir = as.environment(Variable_list))
    ))]
}



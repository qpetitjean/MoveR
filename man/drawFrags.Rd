% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drawFrags.R
\name{drawFrags}
\alias{drawFrags}
\title{Draw tracking fragments}
\usage{
drawFrags(
  trackDat,
  selFrags = NULL,
  imgRes = c(1920, 1080),
  timeWin = list(c(0, Inf)),
  timeCol = "frame",
  colGrad = c("#000000", "#999999", "#6600CC", "#9999FF", "#33CCFF", "#0066CC",
    "#66CC00", "#FFFF00", "#FF3300", "#CC0000"),
  colId = NULL,
  add2It = NULL,
  srt = 0,
  lwd = 1,
  main = "Fragments",
  xlab = "Video width (pixels)",
  ylab = "Video height (pixels)",
  legend = TRUE,
  cex.axis = 1,
  cex.main = 1.25,
  cex.lab = 1,
  cex.leg = 1,
  cex.start = 0.5
)
}
\arguments{
\item{trackDat}{A list of data frame containing tracking information for each fragment (i.e., x.pos, y.pos).}

\item{selFrags}{A vector of either numeric values or character strings,
the number or the id of the selFrags to plot (optional).}

\item{imgRes}{A vector of 2 numeric values, the resolution of the video used as x and y limit of the plot
(i.e., the number of pixels in image width and height, default = 1920 x 1080).}

\item{timeWin}{A list of one or several vector containing 2 numeric values separated by a comma
corresponding to the time interval between which selFrags have to be drawn in frame (optional).}

\item{timeCol}{A character string corresponding to the name of the column containing time information (default = "frame").}

\item{colGrad}{A vector of a ready to use color ramp or several colors specified
either with their name or hexadecimal values (optional).}

\item{colId}{A character string corresponding to a column name
present within each fragments' data frame from the trackDat list
and which is used as grouping factor to color the fragments (default = timeCol).
If colId is composed of continuous values, the legend will be plotted as a gradient.}

\item{add2It}{A function specifying an element to add to the plot.}

\item{srt}{A value or a vector of two values specifying the orientation of the axes values
for the x and y axis respectively (default = 0).}

\item{lwd}{Line width of fragment path (default = 1).}

\item{main}{Primary title of the plot (default = "Fragments").}

\item{xlab}{X-axis label (default = "Video width (pixels)").}

\item{ylab}{Y-axis label (default = "Video height (pixels)").}

\item{legend}{Either TRUE or FALSE, display the legend on the plot or not (default = TRUE).}

\item{cex.axis}{Character size and expansion for axis and legend values (default = 1).}

\item{cex.main}{Character size and expansion for primary title (default = 1.25).}

\item{cex.lab}{Character size and expansion for axes label (default = 1).}

\item{cex.leg}{Character size and expansion for the legend label (default = 1).}

\item{cex.start}{Dot size representing the start of a fragment (default = 0.5).}
}
\value{
A plot with all or only selected fragment paths colored according to time.
}
\description{
Given a list of tracking fragments containing cartesian coordinates,
this function returns a plot with fragments represented as a sequence of segments connecting
cartesian coordinates between successive frames. Fragments are colored according to the time.
}
\examples{


# generate some dummy fragments
## start to specify some parameters to generate fragments
Fragn <- 10 # the number of fragment to simulate
FragL <- 1:1000 # the length of the fragments or a sequence to randomly sample fragment length

fragsList <- stats::setNames(lapply(lapply(seq(Fragn), function(i)
 trajr::TrajGenerate(sample(FragL, 1), random = TRUE, fps = 1)), function(j)
   data.frame(
     x.pos = j$x - min(j$x),
     y.pos = j$y - min(j$y),
     frame = j$time
   )), seq(Fragn))

# convert frag list to a simple list to extract image resolution for generated fragments
# (x, y scales of the plot)
trackDatList <- convert2list(fragsList)

# Exemple 1: draw all fragments, for the whole video duration
drawFrags(
 fragsList,
 imgRes = c(max(trackDatList$x.pos), max(trackDatList$y.pos)),
 timeCol = "frame"
)

# Exemple 2: draw only selected fragments (i.e., 1, 5 and 10), for the whole video duration
drawFrags(
 fragsList,
 imgRes = c(max(trackDatList$x.pos), max(trackDatList$y.pos)),
 selFrags = c(1, 5, 10),
 timeCol = "frame"
)

# Exemple 3: draw fragments according to time intervals
# (first interval 1 to 100, second interval 800 to 900 frames)
drawFrags(
 fragsList,
 imgRes = c(max(trackDatList$x.pos), max(trackDatList$y.pos)),
 timeWin = list(c(1, 100), c(800, 900)),
 timeCol = "frame"
)

# Exemple 4: draw fragments according to time intervals
# (first interval 1 to 100, second interval 800 to 900 frames)
# and color fragment according to their Id instead of time elapsed
drawFrags(
 fragsList,
 imgRes = c(max(trackDatList$x.pos), max(trackDatList$y.pos)),
 timeWin = list(c(1, 100), c(800, 900)),
 timeCol = "frame",
 colFrag = TRUE
)

# Exemple 5: draw fragments according to time interval (interval 1 to 100)
# and add dummy points on the plot
# (here we draw the starting and ending points of each fragments in blue and green respectively)
drawFrags(
 fragsList,
 imgRes = c(max(trackDatList$x.pos), max(trackDatList$y.pos)),
 timeWin = list(c(1, 100)),
 timeCol = "frame",
 add2It = list(for (j in seq(fragsList)) {
   points(
     fragsList[[j]]$x.pos[fragsList[[j]]$frame == 1],
     fragsList[[j]]$y.pos[fragsList[[j]]$frame == 1],
     col = "blue",
     pch = 19,
     cex = 0.8
   )
 }, for (l in seq(fragsList)) {
   points(
     fragsList[[l]]$x.pos[fragsList[[l]]$frame == 100],
     fragsList[[l]]$y.pos[fragsList[[l]]$frame == 100],
     col = "green",
     pch = 19,
     cex = 0.8
   )
 })
)


}

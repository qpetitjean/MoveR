% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/activity2.R
\name{activity2}
\alias{activity2}
\title{Determine active or inactive states according to density based clustering method.}
\usage{
activity2(
  trackDat,
  var1 = NULL,
  var2 = NULL,
  var1T = NULL,
  var2T = NULL,
  nbins = NULL,
  eps = NULL,
  minPts = NULL,
  scale = TRUE,
  na.rm = TRUE,
  graph = TRUE
)
}
\arguments{
\item{trackDat}{A list of data frame containing tracking information for each tracklet.}

\item{var1}{A character string indicating the name of the variable to use as the first dimension.}

\item{var2}{A character string indicating the name of the variable to use as the second dimension.}

\item{var1T}{A function used to transform var1 (e.g., log, sqrt - optional).}

\item{var2T}{A function used to transform var2 (e.g., log, sqrt - optional).}

\item{nbins}{A numeric value indicating the number of bins in both vertical and horizontal directions (default = 100).}

\item{eps}{A numeric value specifying the reachability distance (Ester et al., 1996), which correspond to the maximum distance around cluster's members (see \code{\link[fpc]{dbscan}}).}

\item{minPts}{A numeric value specifying the reachability minimum no. of points (Ester et al., 1996), which correspond to the minimum number of point per cluster (see \code{\link[fpc]{dbscan}}).}

\item{scale}{A logical value (i.e., TRUE or FALSE) indicating whether the data should be centered (i.e., values minus the mean) and scaled (divided by the standard deviation) (default = TRUE).}

\item{na.rm}{A logical value (i.e., TRUE or FALSE) indicating whether NA values should be stripped before the computation proceeds (default = TRUE).}

\item{graph}{A logical value (i.e., TRUE or FALSE) indicating whether the distribution (3d density map) of the active and inactive states according to the classification (density based clustering) plot should be displayed or not (default = TRUE).}
}
\value{
This function returns the results of the classification (actives vs. inactives) as numeric value (1 or 0, respectively) appended to
the original list of data frame containing tracking information for each tracklet.
Also, if graph argument is TRUE, the function returns the distribution (3d density map) of the active and inactive states according to the classification (density based clustering) in the viewer.
}
\description{
Given a list of data frames containing tracking information and two variable of interest the function use
density based clustering as introduced in Ester et al. (1996).
As a result, the function use the DBSCAN method from Hennig (2020) to discriminate active and inactive states in a 2d space by returning numeric values indicating whether the particle is "active" (1) or "inactive" (0).
}
\examples{
\dontrun{

# Download the first dataset from the sample data repository
Path2Data <- MoveR::DLsampleData(dataSet = 1, tracker = "TRex")
Path2Data

# Import the list containing the 9 vectors classically used for further computation
Data <- MoveR::readTrex(Path2Data[[1]])

# convert it to a list of tracklets
trackDat <- MoveR::convert2Tracklets(Data[1:7], by = "identity")

# infinite values that are present in the tracking output should be removed
## define the filter
filter.Inf <-
  MoveR::filterFunc(
    trackDat,
    toFilter = "x.pos",
    customFunc = function(x)
     is.infinite(x)
  )

### filter Infinite values
trackDat.Infilt <-
  MoveR::filterTracklets(trackDat,
                     filter = filter.Inf,
                     splitCond = TRUE,
                     minDur = 100)

### remove some tracklet to speed up the computation
trackdat2 <- trackDat.Infilt[[2]][1:75]

# check the tracklet
MoveR::drawTracklets(trackdat2,
                 timeCol = "frame")

# add some metric to the dataset to perform 2d clustering (speed and turning angle)
# and smooth them by computing the mean value over a 10 frames' sliding window
Tstep = 10
trackdat3 <-
  MoveR::analyseTracklets(
    trackdat2,
    customFunc = list(
      # specify a first function to compute speed over each tracklet (a modulus present within the MoveR package)
      speed = function(x)
        MoveR::speed(x,
                     timeCol = "frame",
                     scale = 1),
      # compute turning angle in radians over each tracklet (a modulus present within the MoveR package)
      TurnAngle = function(x)
        MoveR::turnAngle(
          x,
          timeCol = "frame",
          unit = "radians",
          scale = 1
        ),
      # smooth variance of turning angles
      SlideVarAngle = function (y)
        MoveR::slidWindow(y$TurnAngle,
                       Tstep = Tstep, function (x)
                         circular::var(
                           circular::circular(
                             x,
                             type = "angle",
                             units = "radians",
                             zero = 0
                           ),
                           na.rm = T
                         )),
      # smooth speed
      SlidemeanSpeed = function (y)
        MoveR::slidWindow(y$speed,
                       Tstep = Tstep, function (x)
                         mean(x, na.rm = T))
    )
  )

# use density based clustering to classify actives and inactives states in a 2 dimension array (here the speed and the angle variance)
# when graph = TRUE, the function also display the distribution (3d density map) of the active and inactive states according to the classification (density based clustering)

trackdat3 <- MoveR::activity2(
  trackdat3,
  var1 = "SlidemeanSpeed",
  var2 = "SlideVarAngle",
  var1T = log10,
  nbins = 100,
  eps = 0.15,
  minPts = 5,
  scale = TRUE,
  na.rm = TRUE,
  graph = TRUE
)

# draw the particle' trajectory and spot the inactive moments using red dots
MoveR::drawTracklets(trackdat3,
          cex.start = 0.1,
          add2It = list(for (i in seq_along(trackdat3)) {
            points(
              trackdat3[[i]][["x.pos"]][which(trackdat3[[i]][["activity2"]] == 0)],
              trackdat3[[i]][["y.pos"]][which(trackdat3[[i]][["activity2"]] == 0)],
              col = "red",
              pch = 19,
              cex = 1.5
            )
          }))

}
}
\references{
\itemize{
\item{Christian, H., (2020). fpc: Flexible Procedures for Clustering. R package version 2.2-9. \href{https://CRAN.R-project.org/package=fpc}{https://CRAN.R-project.org/package=fpc}}
\item{Ester, M., Kriegel H.P., Sander, J., Xu X., (1996). A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise. Institute for Computer Science, University of Munich. Proceedings of 2nd International Conference on Knowledge Discovery and Data Mining (KDD-96).}
}
}
\seealso{
\code{\link[fpc]{dbscan}}
}
\author{
Quentin PETITJEAN
}
